#!/bin/bash

# Script para commit autom√°tico com IA
# Uso: ./ai-commit.sh

echo "ü§ñ Analisando mudan√ßas com IA..."

# Verifica se h√° mudan√ßas staged
if [ -z "$(git diff --cached --name-only)" ]; then
    echo "‚ùå Nenhum arquivo staged para commit!"
    echo "Execute: git add <arquivos>"
    exit 1
fi

# Lista os arquivos modificados
FILES=$(git diff --cached --name-only)
echo "üìÇ Arquivos modificados:"
echo "$FILES"

echo ""
echo "ÔøΩ Analisando mudan√ßas detalhadamente..."

# Pega informa√ß√µes detalhadas das mudan√ßas
DIFF=$(git diff --cached --stat)
DETAILED_DIFF=$(git diff --cached)

echo "üìä Estat√≠sticas das mudan√ßas:"
echo "$DIFF"
echo ""

# Fun√ß√£o para analisar mudan√ßas de forma muito detalhada
analyze_changes_detailed() {
    local files="$1"
    local detailed_diff="$2"
    
    echo "üß† An√°lise detalhada:"
    
    # An√°lise por arquivo
    while IFS= read -r file; do
        if [ ! -z "$file" ]; then
            echo "   üìÑ $file:"
            
            # Pega apenas as mudan√ßas deste arquivo
            file_diff=$(git diff --cached "$file")
            
            # An√°lise espec√≠fica por tipo de arquivo
            case "$file" in
                *.md|README*)
                    if echo "$file_diff" | grep -q "^+.*#"; then
                        headers=$(echo "$file_diff" | grep "^+.*#" | sed 's/^+//' | head -3)
                        echo "      ‚ú® Adicionou se√ß√µes: $(echo "$headers" | tr '\n' ', ' | sed 's/,$//')"
                    fi
                    if echo "$file_diff" | grep -q "^+.*\*\*\|^+.*\`"; then
                        echo "      üìù Melhorou formata√ß√£o e destaque de c√≥digo"
                    fi
                    if echo "$file_diff" | grep -q "^+.*http\|^+.*npm\|^+.*git"; then
                        echo "      üîó Adicionou links e comandos de refer√™ncia"
                    fi
                    ;;
                *.ts|*.js)
                    if echo "$file_diff" | grep -q "^+.*import\|^+.*require"; then
                        imports=$(echo "$file_diff" | grep "^+.*import" | sed "s/.*from ['\"]//;s/['\"].*//" | head -3)
                        echo "      üì¶ Importou: $(echo "$imports" | tr '\n' ', ' | sed 's/,$//')"
                    fi
                    if echo "$file_diff" | grep -q "^+.*\.get\|^+.*\.post\|^+.*\.put\|^+.*\.delete"; then
                        routes=$(echo "$file_diff" | grep -o "\.get\|\.post\|\.put\|\.delete" | sort -u | tr '\n' ' ')
                        echo "      üõ£Ô∏è  Implementou rotas: $routes"
                    fi
                    if echo "$file_diff" | grep -q "^+.*schema.*:"; then
                        echo "      ‚úÖ Adicionou valida√ß√£o de esquemas"
                    fi
                    if echo "$file_diff" | grep -q "^+.*async\|^+.*await"; then
                        echo "      ‚ö° Implementou opera√ß√µes ass√≠ncronas"
                    fi
                    if echo "$file_diff" | grep -q "^+.*export"; then
                        exports=$(echo "$file_diff" | grep "^+.*export" | wc -l)
                        echo "      üì§ Exportou $exports nova(s) fun√ß√£o(√µes)"
                    fi
                    ;;
                package.json)
                    if echo "$file_diff" | grep -q "\"dependencies\""; then
                        new_deps=$(echo "$file_diff" | grep "^+.*\".*\":" | sed 's/.*"\([^"]*\)".*/\1/' | head -5)
                        echo "      üì¶ Adicionou depend√™ncias: $(echo "$new_deps" | tr '\n' ', ' | sed 's/,$//')"
                    fi
                    if echo "$file_diff" | grep -q "\"scripts\""; then
                        echo "      üîß Atualizou scripts npm"
                    fi
                    ;;
                *.env)
                    echo "      üîê Atualizou vari√°veis de ambiente"
                    ;;
                *.sql|*migration*)
                    echo "      üóÑÔ∏è  Atualizou esquema do banco de dados"
                    ;;
            esac
            
            # An√°lise de linhas adicionadas/removidas
            additions=$(echo "$file_diff" | grep -c "^+" || echo "0")
            deletions=$(echo "$file_diff" | grep -c "^-" || echo "0")
            echo "      üìà +$additions -$deletions linhas"
        fi
    done <<< "$files"
    
    echo ""
    
    # Gera mensagem de commit baseada na an√°lise
    if echo "$files" | grep -q "README\|\.md"; then
        if echo "$detailed_diff" | grep -q "^+.*#.*API\|^+.*endpoint"; then
            echo "docs: documentar endpoints da API"
        elif echo "$detailed_diff" | grep -q "^+.*install\|^+.*npm run"; then
            echo "docs: atualizar guia de instala√ß√£o e uso"
        elif echo "$detailed_diff" | grep -q "^+.*commit\|^+.*git"; then
            echo "docs: adicionar guia de commits automatizados"
        else
            echo "docs: melhorar documenta√ß√£o do projeto"
        fi
    elif echo "$files" | grep -q "package\.json"; then
        if echo "$detailed_diff" | grep -q "@scalar\|swagger"; then
            echo "feat: integrar documenta√ß√£o autom√°tica da API"
        elif echo "$detailed_diff" | grep -q "commit\|husky"; then
            echo "feat: configurar sistema de commits automatizados"
        else
            echo "chore: atualizar depend√™ncias do projeto"
        fi
    elif echo "$files" | grep -q "server\.ts\|app\.ts"; then
        if echo "$detailed_diff" | grep -q "scalar\|swagger"; then
            echo "feat: configurar documenta√ß√£o autom√°tica com Scalar"
        elif echo "$detailed_diff" | grep -q "register.*Route"; then
            echo "feat: registrar novas rotas da API"
        else
            echo "feat: atualizar configura√ß√£o do servidor"
        fi
    elif echo "$files" | grep -q "routes/"; then
        if echo "$detailed_diff" | grep -q "schema.*tags\|summary"; then
            echo "feat: adicionar documenta√ß√£o autom√°tica nas rotas"
        elif echo "$detailed_diff" | grep -q "\.post.*courses"; then
            echo "feat: implementar cria√ß√£o de cursos"
        elif echo "$detailed_diff" | grep -q "\.get.*courses"; then
            echo "feat: implementar listagem de cursos"
        else
            echo "feat: implementar nova funcionalidade da API"
        fi
    elif echo "$files" | grep -q "\.sh"; then
        echo "feat: melhorar script de commits automatizados"
    else
        # An√°lise gen√©rica mais inteligente
        total_additions=$(echo "$detailed_diff" | grep -c "^+" || echo "0")
        total_deletions=$(echo "$detailed_diff" | grep -c "^-" || echo "0")
        
        if [ "$total_additions" -gt 50 ]; then
            echo "feat: implementar nova funcionalidade significativa"
        elif [ "$total_deletions" -gt "$total_additions" ]; then
            echo "refactor: limpar e organizar c√≥digo"
        else
            echo "feat: implementar melhorias no projeto"
        fi
    fi
}

# Gera mensagem inteligente com an√°lise detalhada
COMMIT_MSG=$(analyze_changes_detailed "$FILES" "$DETAILED_DIFF")

echo ""
echo "ÔøΩ Resumo da an√°lise:"
TOTAL_FILES=$(echo "$FILES" | wc -l | tr -d ' ')
TOTAL_ADDITIONS=$(echo "$DETAILED_DIFF" | grep -c "^+" || echo "0")
TOTAL_DELETIONS=$(echo "$DETAILED_DIFF" | grep -c "^-" || echo "0")

echo "   üìä $TOTAL_FILES arquivo(s) modificado(s)"
echo "   ‚ûï $TOTAL_ADDITIONS linhas adicionadas"
echo "   ‚ûñ $TOTAL_DELETIONS linhas removidas"
echo ""
echo "‚ú® Mensagem de commit gerada:"
echo "   üìù $COMMIT_MSG"
echo ""
read -p "ü§î Confirmar commit com esta mensagem? (y/N): " confirm

if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    git commit -m "$COMMIT_MSG"
    echo ""
    echo "‚úÖ Commit realizado com sucesso!"
    echo "üéâ Mensagem: $COMMIT_MSG"
else
    echo "‚ùå Commit cancelado."
    echo "üí° Dica: Execute 'git diff --cached' para ver as mudan√ßas detalhadas"
fi
