#!/bin/bash

# Script para commit autom√°tico com IA
# Uso: ./ai-commit.sh

echo "ü§ñ Gerando commit com IA..."

# Verifica se h√° mudan√ßas staged
if [ -z "$(git diff --cached --name-only)" ]; then
    echo "‚ùå Nenhum arquivo staged para commit!"
    echo "Execute: git add <arquivos>"
    exit 1
fi

# Lista os arquivos modificados
echo "üìÇ Arquivos modificados:"
git diff --cached --name-only

echo ""
echo "üîÑ Analisando mudan√ßas..."

# Pega o diff das mudan√ßas
DIFF=$(git diff --cached)

# Cria um prompt simples para a IA
PROMPT="Com base nas mudan√ßas abaixo, gere uma mensagem de commit seguindo o padr√£o Conventional Commits (tipo(escopo): descri√ß√£o).
Use apenas lowercase na descri√ß√£o e mantenha conciso (m√°ximo 50 caracteres):

Mudan√ßas:
$DIFF

Responda APENAS com a mensagem de commit, sem explica√ß√µes:"

echo "üí≠ Gerando mensagem de commit..."

# Simula gera√ß√£o de IA (voc√™ pode integrar com uma API real aqui)
# Por enquanto, vamos usar uma l√≥gica simples baseada nos arquivos

FILES=$(git diff --cached --name-only)
if echo "$FILES" | grep -q "README\|\.md"; then
    COMMIT_MSG="docs: atualizar documenta√ß√£o"
elif echo "$FILES" | grep -q "\.ts\|\.js"; then
    COMMIT_MSG="feat: implementar nova funcionalidade"
elif echo "$FILES" | grep -q "test\|spec"; then
    COMMIT_MSG="test: adicionar testes"
elif echo "$FILES" | grep -q "package\.json\|yarn\.lock\|package-lock\.json"; then
    COMMIT_MSG="chore: atualizar depend√™ncias"
else
    COMMIT_MSG="chore: atualizar arquivos"
fi

echo "‚ú® Mensagem gerada: $COMMIT_MSG"
echo ""
read -p "ü§î Confirmar commit? (y/N): " confirm

if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    git commit -m "$COMMIT_MSG"
    echo "‚úÖ Commit realizado com sucesso!"
else
    echo "‚ùå Commit cancelado."
fi
